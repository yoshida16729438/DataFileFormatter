name: build and execute test on pullreq for .NET Framework console app

on:
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'input target branch to test'
        required: true
        type: string

env:
  test_project_name: "DataFileFormatterTest"
  solution_name: "DataFileFormatter"

defaults:
  run:
    shell: pwsh

jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: set branch name when the event was pullreq
      if: github.event_name == 'pull_request'
      run: |
        $branch_name = "${{ github.head_ref }}"
        echo "target_branch=${branch_name}" | Out-File -FilePath ${Env:GITHUB_ENV} -Encoding utf8 -Append

    - name: set branch name when the event was dispatch
      if: github.event_name == 'workflow_dispatch'
      run: |
        $branch_name = "${{ github.event.inputs.branch_name }}"
        echo "branch_name=${branch_name}"
        echo "target_branch=${branch_name}" | Out-File -FilePath ${Env:GITHUB_ENV} -Encoding utf8 -Append

    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_branch }}

    # Add MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # restore NuGet packages
    - name: restore NuGet packages
      run: msbuild -t:restore -p:RestorePackagesConfig=true ./${{ env.solution_name }}.sln

    # Build the app and test dll
    - name: Build
      run: msbuild -t:build -restore -p:Configuration=Release ./${{ env.solution_name }}.sln

    # Install the .NET Core workload to use dotnet test
    #- name: Install .NET Core
    #  uses: actions/setup-dotnet@v4
    #  with:
    #    dotnet-version: 8.0.x

     Execute all unit tests in the solution
    - name: Execute unit tests
      id: test
      run: |
        chcp 932
        #dotnet test ./${{ env.test_project_name }}/bin/Release/${{ env.test_project_name }}.dll --logger trx /Enablecodecoverage
        dotnet test ./${{ env.test_project_name }}/${{ env.test_project_name }}.csproj --logger trx --collect "Code Coverage"

    # test with vstest.console
    #- name: test
    #  id: test
    #  run: |
    #    chcp 932
    #    $msbuild_path = ($(where.exe msbuild) -split "'r'n")[0]
    #    echo "msbuild_path = ${msbuild_path}"
    #    $vstest_search_root = [System.IO.Path]::GetDirectoryName(${msbuild_path})
    #    $vstest_search_name = "Common7/IDE/CommonExtensions/Microsoft/TestWindow/vstest.console.exe"
    #    while(![System.IO.File]::Exists([System.IO.Path]::Combine(${vstest_search_root},${vstest_search_name}))){ $vstest_search_root = [System.IO.Path]::Combine(${vstest_search_root},"../") }
    #    $vstest_path = [System.IO.Path]::GetFullPath([System.IO.Path]::Combine(${vstest_search_root}, ${vstest_search_name}))
    #    echo "vstest_path = ${vstest_path}"
    #    &${vstest_path} /Logger:trx ./${{ env.test_project_name }}/bin/Release/${{ env.test_project_name }}.dll /InIsolation #/Enablecodecoverage

    - name: get exit code
      if: ${{ always() }}
      run: |
        echo ${{ steps.test.outcome }}
        echo ${{ steps.test.outcome == 'success' || steps.test.outcome == 'failure' }}
        echo ${{ toJSON(steps.test.outcome) }}
        echo ${{ toJSON('success') }}
        ls ./TestResults/

    - name: upload test result
      if: ${{ always() && (steps.test.outcome == 'success' || steps.test.outcome == 'failure') }}
      uses: actions/upload-artifact@v4
      with:
        name: failed_test_result
        path: ./TestResults/*.trx

