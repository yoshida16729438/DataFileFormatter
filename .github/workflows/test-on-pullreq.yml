name: build and execute test on pullreq for .NET Framework console app

on:
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'input target branch to test'
        required: true
        type: string

env:
  test_project_name: "DataFileFormatterTest"
  solution_name: "DataFileFormatter"

defaults:
  run:
    shell: pwsh

jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: set branch name when the event was pullreq
      if: github.event_name == 'pull_request'
      run: |
        $branch_name = "${{ github.head_ref }}"
        echo "target_branch=${branch_name}" | Out-File -FilePath ${Env:GITHUB_ENV} -Encoding utf8 -Append

    - name: set branch name when the event was dispatch
      if: github.event_name == 'workflow_dispatch'
      run: |
        $branch_name = "${{ github.event.inputs.branch_name }}"
        echo "branch_name=${branch_name}"
        echo "target_branch=${branch_name}" | Out-File -FilePath ${Env:GITHUB_ENV} -Encoding utf8 -Append

    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_branch }}

    # Add MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # restore NuGet packages
    - name: restore NuGet packages
      run: msbuild -t:restore -p:RestorePackagesConfig=true ./${{ env.solution_name }}.sln

    # Build the app and test dll
    - name: Build
      run: msbuild -t:build -restore -p:Configuration=Release ./${{ env.solution_name }}.sln

    # Install the .NET Core workload to use dotnet test
    #- name: Install .NET Core
    #  uses: actions/setup-dotnet@v4
    #  with:
    #    dotnet-version: 8.0.x

    # Execute all unit tests in the solution
    #- name: Execute unit tests
    #  id: test
    #  run: |
    #    chcp 932
    #    dotnet test ./${{ env.test_project_name }}/bin/Release/${{ env.test_project_name }}.dll --logger trx /Enablecodecoverage

    - name: set visual studio install folder path to env
      run: |
        $msbuild_path = ($(where.exe msbuild) -split "'r'n")[0]
        $vs_search_root = [System.IO.Path]::GetDirectoryName(${msbuild_path})
        $vs_search_name = "Common7/IDE/CommonExtensions/Microsoft/TestWindow/vstest.console.exe"
        while(![System.IO.File]::Exists([System.IO.Path]::Combine(${vs_search_root}, ${vs_search_name}))){ $vs_search_root = [System.IO.Path]::Combine(${vs_search_root}, "../") }
        $vs_root = [System.IO.Path]::GetFullPath(${vs_search_root})
        echo "vs_root = ${vs_root}"
        echo "VS_ROOT=${vs_root}" | Out-File -FilePath ${Env:GITHUB_ENV} -Encoding utf8 -Append

    # test with vstest.console
    - name: test
      id: test
      run: |
        chcp 932
        $path_to_vstest = "Common7/IDE/CommonExtensions/Microsoft/TestWindow/vstest.console.exe"
        $vstest_path = [System.IO.Path]::Combine(${{ env.VS_ROOT }}, ${path_to_vstest})
        &${vstest_path} /Logger:html ./${{ env.test_project_name }}/bin/Release/${{ env.test_project_name }}.dll /Enablecodecoverage

    - name: convert coverage file to xml
      if: ${{ always() && (steps.test.outcome == 'success' || steps.test.outcome == 'failure') }}
      id: convert_coverage_file
      run: |
        $coverage_path = "./$(dir -Recurse -File -Name -Filter *.coverage | Sort-Object | Select-Object -First 1)"
        cp ${coverage_path} ./TestResults/codecoverage.coverage
        $path_to_dll = "Common7\IDE\PrivateAssemblies\Microsoft.VisualStudio.Coverage.Analysis.dll"
        $dll_path = [System.IO.Path]::Combine(${{ env.VS_ROOT }}, ${path_to_dll})
        $output_path = "./TestResults/codecoverage.xml"
        Import-Module -Name ${dll_path}
        $coverage_info = [Microsoft.VisualStudio.Coverage.Analysis.CoverageInfo]::CreateFromFile(${coverage_path})
        [System.Data.DataSet] $data = ${coverage_info}.BuildDataSet()
        ${data}.WriteXml(${output_path})
        ${data}.Dispose()
        ${coverage_info}.Dispose()

    - name: generate coverage report
      if: ${{ always() && (steps.convert_coverage_file.outcome == 'success' || steps.convert_coverage_file.outcome == 'failure') }}
      run: |
        dotnet add package ReportGenerator --version 5.4.6
        ${HOME}\.nuget\packages\reportgenerator\5.4.6\tools\net47\ReportGenerator.exe `
        -reports:./TestResults/codecoverage.xml `
        -targetdir:./TestResults `
        -reporttypes:HtmlInline

    - name: upload test result
      if: ${{ always() && (steps.test.outcome == 'success' || steps.test.outcome == 'failure') }}
      uses: actions/upload-artifact@v4
      with:
        name: test_result
        path: ./TestResults/*.*
