name: build and execute test on pullreq for .NET Framework console app

on:
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      branch_name:
        description: "input target branch to test"
        required: true
        type: string

env:
  test_project_name: "DataFileFormatterTest"
  solution_name: "DataFileFormatter"

permissions:
  pull-requests: write

defaults:
  run:
    shell: pwsh

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: set branch name when the event was pullreq
        if: github.event_name == 'pull_request'
        run: |
          $branch_name = "${{ github.head_ref }}"
          echo "target_branch=${branch_name}" | Out-File -FilePath ${Env:GITHUB_ENV} -Encoding utf8 -Append

      - name: set branch name when the event was dispatch
        if: github.event_name == 'workflow_dispatch'
        run: |
          $branch_name = "${{ github.event.inputs.branch_name }}"
          echo "branch_name=${branch_name}"
          echo "target_branch=${branch_name}" | Out-File -FilePath ${Env:GITHUB_ENV} -Encoding utf8 -Append

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ env.target_branch }}

      # Install the .NET Core workload to use dotnet test
      - name: Install .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: create artifact directory and set name to env
        run: |
          $datetime = $(Get-Date -Format "yyyyMMdd_HHmmss")
          $artifact_directory = "test_result_${datetime}"
          mkdir "./${artifact_directory}"
          echo "artifact_directory=${artifact_directory}" | Out-File -FilePath ${Env:GITHUB_ENV} -Encoding utf8 -Append

      # Execute all unit tests in the solution
      - name: Execute unit tests
        id: test
        run: |
          chcp 932
          dotnet test ./${{ env.solution_name }}.sln --logger html --collect "XPlat Code Coverage" --results-directory ./TestResults/ --configuration Debug /p:Include="[${{ env.solution_name }}]*" /p:CoverletOutputFormat=cobertura
          chcp 65001
          $html_name = $(dir ./TestResults/ -Name -Filter *.html | findstr html | Select-Object -First 1)
          $xml_name = $(dir ./TestResults/ -Recurse -Name -Filter *.cobertura.xml | findstr xml | select-object -first 1)
          copy "./TestResults/${html_name}" "./${{ env.artifact_directory }}/${html_name}"
          copy "./TestResults/${xml_name}" "./${{ env.artifact_directory }}/$([System.IO.Path]::GetFileName(${xml_name}))"

      - name: generate coverage report
        if: ${{ always() && steps.test.outcome == 'success' }}
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool --version 5.4.6
          $reportgen_path = "${HOME}\.nuget\packages\reportgenerator\5.4.6\tools\net47\ReportGenerator.exe"
          reportgenerator -reports:./${{ env.artifact_directory }}/*.cobertura.xml -targetdir:"./${{ env.artifact_directory }}/coverage-report/"

      - name: upload test result
        if: ${{ always() && (steps.test.outcome == 'success' || steps.test.outcome == 'failure') }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact_directory }}
          path: ./${{ env.artifact_directory }}/
          
      - name: log test results to pullreq comment
        if: ${{ always() && github.event_name == 'pull_request' && steps.upload-results.outcome == 'success' }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: "test result path: ${{ steps.upload-results.outputs.artifact-url }}"
